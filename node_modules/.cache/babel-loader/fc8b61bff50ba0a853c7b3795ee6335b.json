{"ast":null,"code":"var _jsxFileName = \"/home/pavel/Desktop/React/unShiftTest/src/components/Container.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { postsDataSelector } from '../redux/app-selectors';\nimport { getPostsTC, addPostTC, deletePostTC, changeEditablePost } from '../redux/app-reducer';\nimport { Grid } from 'semantic-ui-react';\nimport PostForm from './Posts/PostForm';\nimport Posts from './Posts/Posts';\n\nconst Container = props => {\n  const postsData = props.postsData,\n        getPostsData = props.getPostsData,\n        addPost = props.addPost,\n        deletePost = props.deletePost,\n        changeEditablePost = props.changeEditablePost;\n  React.useEffect(() => {\n    getPostsData();\n  }, [getPostsData]);\n  return React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Posts, {\n    postsData: postsData,\n    addPost: addPost,\n    deletePost: deletePost,\n    changeEditablePost: changeEditablePost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    postsData: postsDataSelector(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsData: () => dispatch(getPostsTC()),\n    addPost: post => dispatch(addPostTC(post)),\n    deletePost: postId => dispatch(deletePostTC(postId)),\n    changeEditablePost: post => dispatch(changeEditablePost(post))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Container);","map":{"version":3,"sources":["/home/pavel/Desktop/React/unShiftTest/src/components/Container.jsx"],"names":["React","Route","connect","postsDataSelector","getPostsTC","addPostTC","deletePostTC","changeEditablePost","Grid","PostForm","Posts","Container","props","postsData","getPostsData","addPost","deletePost","useEffect","mapStateToProps","state","mapDispatchToProps","dispatch","post","postId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,EAA8CC,kBAA9C,QAAwE,sBAAxE;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA,QACnBC,SADmB,GACkDD,KADlD,CACnBC,SADmB;AAAA,QACRC,YADQ,GACkDF,KADlD,CACRE,YADQ;AAAA,QACMC,OADN,GACkDH,KADlD,CACMG,OADN;AAAA,QACeC,UADf,GACkDJ,KADlD,CACeI,UADf;AAAA,QAC2BT,kBAD3B,GACkDK,KADlD,CAC2BL,kBAD3B;AAG3BP,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAK;AACnBH,IAAAA,YAAY;AACb,GAFD,EAEE,CAACA,YAAD,CAFF;AAIA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAED,SADb;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,UAAU,EAAEC,UAHd;AAIE,IAAA,kBAAkB,EAAET,kBAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAUD,CAjBD;;AAmBA,MAAMW,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLN,IAAAA,SAAS,EAAEV,iBAAiB,CAACgB,KAAD;AADvB,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLP,IAAAA,YAAY,EAAE,MAAMO,QAAQ,CAACjB,UAAU,EAAX,CADvB;AAELW,IAAAA,OAAO,EAAGO,IAAD,IAAUD,QAAQ,CAAChB,SAAS,CAACiB,IAAD,CAAV,CAFtB;AAGLN,IAAAA,UAAU,EAAGO,MAAD,IAAYF,QAAQ,CAACf,YAAY,CAACiB,MAAD,CAAb,CAH3B;AAILhB,IAAAA,kBAAkB,EAAGe,IAAD,IAAUD,QAAQ,CAACd,kBAAkB,CAACe,IAAD,CAAnB;AAJjC,GAAP;AAMD,CAPD;;AASA,eAAepB,OAAO,CAACgB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CT,SAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { postsDataSelector } from '../redux/app-selectors';\nimport { getPostsTC, addPostTC, deletePostTC, changeEditablePost } from '../redux/app-reducer';\nimport { Grid } from 'semantic-ui-react';\nimport PostForm from './Posts/PostForm';\nimport Posts from './Posts/Posts';\n\nconst Container = (props) => {\n  const { postsData, getPostsData, addPost, deletePost, changeEditablePost } = props;\n\n  React.useEffect(()=> {\n    getPostsData();\n  },[getPostsData])\n\n  return (\n    <Grid>\n      {/* <Route path='/edit/:postId?' render={() => <PostForm />} /> */}\n      <Posts \n        postsData={postsData}\n        addPost={addPost} \n        deletePost={deletePost}\n        changeEditablePost={changeEditablePost}/>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    postsData: postsDataSelector(state),\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsData: () => dispatch(getPostsTC()),\n    addPost: (post) => dispatch(addPostTC(post)),\n    deletePost: (postId) => dispatch(deletePostTC(postId)),\n    changeEditablePost: (post) => dispatch(changeEditablePost(post)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Container);"]},"metadata":{},"sourceType":"module"}