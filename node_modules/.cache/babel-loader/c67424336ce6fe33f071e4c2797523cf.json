{"ast":null,"code":"import _slicedToArray from \"/home/pavel/Desktop/React/unShiftTest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pavel/Desktop/React/unShiftTest/src/components/Container.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { postsDataSelector } from '../redux/app-selectors';\nimport { getPostsTC, addPostTC, deletePostTC, changePostTC, addCommentTC } from '../redux/app-reducer';\nimport { Grid } from 'semantic-ui-react';\nimport PostForm from './Posts/PostForm';\nimport Posts from './Posts/Posts';\n\nconst Container = props => {\n  const postsData = props.postsData,\n        getPostsData = props.getPostsData,\n        addPost = props.addPost,\n        deletePost = props.deletePost,\n        changePost = props.changePost,\n        addComment = props.addComment;\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isFetching = _React$useState2[0],\n        setIsFetching = _React$useState2[1];\n\n  React.useEffect(() => {\n    getPostsData().then(data => console.log(data));\n  }, [getPostsData]);\n  return React.createElement(Grid, {\n    container: true,\n    centered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    mobile: 16,\n    computer: 10,\n    largeScreen: 8,\n    style: {\n      minHeight: '100vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/edit/:postId?\",\n    render: () => React.createElement(PostForm, {\n      postsData: postsData,\n      onSubmit: changePost,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => React.createElement(Posts, {\n      postsData: postsData,\n      addPost: addPost,\n      deletePost: deletePost,\n      addComment: addComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    postsData: postsDataSelector(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsData: () => dispatch(getPostsTC()),\n    addPost: post => dispatch(addPostTC(post)),\n    deletePost: postId => dispatch(deletePostTC(postId)),\n    changePost: post => dispatch(changePostTC(post)),\n    addComment: (comment, postId) => dispatch(addCommentTC(comment, postId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Container);","map":{"version":3,"sources":["/home/pavel/Desktop/React/unShiftTest/src/components/Container.jsx"],"names":["React","Route","connect","postsDataSelector","getPostsTC","addPostTC","deletePostTC","changePostTC","addCommentTC","Grid","PostForm","Posts","Container","props","postsData","getPostsData","addPost","deletePost","changePost","addComment","useState","isFetching","setIsFetching","useEffect","then","data","console","log","minHeight","mapStateToProps","state","mapDispatchToProps","dispatch","post","postId","comment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { postsDataSelector } from '../redux/app-selectors';\nimport { getPostsTC, addPostTC, deletePostTC, changePostTC, addCommentTC } from '../redux/app-reducer';\nimport { Grid } from 'semantic-ui-react';\nimport PostForm from './Posts/PostForm';\nimport Posts from './Posts/Posts';\n\nconst Container = (props) => {\n  const { \n    postsData, getPostsData, addPost, \n    deletePost, changePost, addComment } = props;\n\n  const [isFetching, setIsFetching] = React.useState(false);\n\n  React.useEffect(()=> {\n    getPostsData().then(data => console.log(data));\n  },[getPostsData])\n\n  return (\n    <Grid container centered>\n      <Grid.Row>\n        <Grid.Column mobile={16} computer={10} largeScreen={8} style={{minHeight: '100vh'}}>\n          <Route path='/edit/:postId?' render={() => <PostForm \n            postsData={postsData} \n            onSubmit={changePost}/>} />\n          <Route exact path='/' render={() => <Posts \n            postsData={postsData}\n            addPost={addPost} \n            deletePost={deletePost}\n            addComment={addComment}/>} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    postsData: postsDataSelector(state),\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsData: () => dispatch(getPostsTC()),\n    addPost: (post) => dispatch(addPostTC(post)),\n    deletePost: (postId) => dispatch(deletePostTC(postId)),\n    changePost: (post) => dispatch(changePostTC(post)),\n    addComment: (comment, postId) => dispatch(addCommentTC(comment, postId)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Container);"]},"metadata":{},"sourceType":"module"}